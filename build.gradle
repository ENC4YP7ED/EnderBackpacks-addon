plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            getProgramArguments().addAll '--username', 'Dev1'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    maven {url "https://api.modrinth.com/maven" }
    maven {url "https://maven.blamejared.com/" }
    maven {url "https://maven.wispforest.io/releases" }
    maven {url "https://maven.su5ed.dev/releases" }
    flatDir {
        dirs '../Backpacks-master/build/libs'
    }
}

dependencies {
    // Backpack for Dummies - main mod dependency (REQUIRED)
    implementation files('../Backpacks-master/build/libs/backpacks-0.3.2.jar')

    // MixinConstraints
    jarJar(implementation("com.moulberry:mixinconstraints:1.0.7") {
        exclude group: "org.slf4j",
                module: "slf4j-api"
    })

    // Accessories integration (optional)
    compileOnly "io.wispforest:accessories-neoforge:${accessories_version}"
    localRuntime "io.wispforest:accessories-neoforge:${accessories_version}"

    // Testing dependencies
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:19.21.0.247"
    localRuntime "maven.modrinth:farmers-delight:1.21.1-1.2.7"
    localRuntime "maven.modrinth:sodium:Pb3OXVqC"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
